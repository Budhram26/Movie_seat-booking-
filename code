import tkinter as tk
from tkinter import messagebox
import datetime
import csv
import sqlite3  # Import sqlite3 to handle the database

class SeatBookingApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Movie Hall Seat Booking")
        self.root.geometry("900x700")

        # Create SQLite database connection
        self.conn = sqlite3.connect('bookings.db')  # Ensure you have a database file
        self.create_table()  # Create the bookings table if it doesn't exist

        # Create variables to store seat status and layout
        self.seats = [[None for _ in range(10)] for _ in range(6)]
        self.total_seats = 60
        self.booked_seats = 0

        # Customer Details
        self.customer_name_label = tk.Label(root, text="Customer Name:", font=("Arial", 14))
        self.customer_name_label.grid(row=0, column=0, padx=8, pady=5, sticky='w')
        self.customer_name_entry = tk.Entry(root, font=("Arial", 14), width=30)
        self.customer_name_entry.grid(row=0, column=1, columnspan=2, padx=8, pady=5)

        self.customer_contact_label = tk.Label(root, text="Contact Number:", font=("Arial", 14))
        self.customer_contact_label.grid(row=1, column=0, padx=8, pady=5, sticky='w')
        self.customer_contact_entry = tk.Entry(root, font=("Arial", 14), width=30)
        self.customer_contact_entry.grid(row=1, column=1, columnspan=2, padx=8, pady=5)

        # Movie Title and Show Time
        self.movie_title_label = tk.Label(root, text="Movie Title:", font=("Arial", 14))
        self.movie_title_label.grid(row=2, column=0, padx=8, pady=5, sticky='w')
        self.movie_title_entry = tk.Entry(root, font=("Arial", 14), width=40)
        self.movie_title_entry.grid(row=2, column=1, columnspan=2, padx=8, pady=5)

        self.show_time_label = tk.Label(root, text="Show Time:", font=("Arial", 14))
        self.show_time_label.grid(row=3, column=0, padx=8, pady=5, sticky='w')
        self.show_time_entry = tk.Entry(root, font=("Arial", 14), width=40)
        self.show_time_entry.grid(row=3, column=1, columnspan=2, padx=8, pady=5)

        # Screen Label and Sections
        self.screen_label = tk.Label(root, text="Screen", font=("Arial", 16, "bold"), bg="black", fg="white", width=50, height=2)
        self.screen_label.grid(row=5, columnspan=10, pady=8)

        tk.Label(root, text="Front Section", font=("Arial", 14, "bold")).grid(row=6, columnspan=10, pady=6)
        tk.Label(root, text="Mid Section", font=("Arial", 14, "bold")).grid(row=9, columnspan=10, pady=6)
        tk.Label(root, text="Back Section", font=("Arial", 14, "bold")).grid(row=12, columnspan=10, pady=6)

        # Create seat buttons
        row_labels = ['A', 'B', 'C', 'D', 'E', 'F']
        for section in range(3):
            for row in range(2):
                row_label = tk.Label(root, text=row_labels[section * 2 + row], font=("Arial", 12, "bold"))
                row_label.grid(row=section * 3 + row + 7, column=0, padx=5, pady=5, sticky='e')
                for col in range(10):
                    button = tk.Button(root, text="Available", width=8, height=2, bg="green",
                                       command=lambda s=section, r=row, c=col: self.toggle_seat_selection(s, r, c))
                    button.grid(row=section * 3 + row + 7, column=col + 1, padx=5, pady=5)
                    self.seats[section * 2 + row][col] = button

        # Booking and Cancel Buttons
        confirm_button = tk.Button(root, text="Confirm Booking", command=self.confirm_booking)
        confirm_button.grid(row=16, column=0, columnspan=5, pady=10)

        cancel_button = tk.Button(root, text="Cancel Selected", command=self.cancel_booking)
        cancel_button.grid(row=16, column=5, columnspan=3, pady=10)

        reset_button = tk.Button(root, text="Reset", command=self.reset_booking)
        reset_button.grid(row=16, column=8, columnspan=2, pady=10)

        # About Button
        about_button = tk.Button(root, text="About", command=self.show_about)
        about_button.grid(row=16, column=10, padx=10, pady=10)  # Placed in a new column

        # Labels to show available and booked seats
        self.available_label = tk.Label(root, text=f"Available Seats: {self.total_seats}", font=("Arial", 12))
        self.available_label.grid(row=18, column=0, columnspan=5, pady=10)

        self.booked_label = tk.Label(root, text=f"Booked Seats: {self.booked_seats}", font=("Arial", 12))
        self.booked_label.grid(row=18, column=5, columnspan=5, pady=10)

        self.selected_seats = []
        self.selected_to_cancel = []

    def create_table(self):
        cursor = self.conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS bookings (
                          id INTEGER PRIMARY KEY,
                          name TEXT,
                          contact TEXT,
                          movie_title TEXT,
                          show_time TEXT,
                          booking_date TEXT,
                          booked_seats TEXT)''')
        self.conn.commit()

    def toggle_seat_selection(self, section, row, col):
        actual_row = section * 2 + row
        button = self.seats[actual_row][col]
        if button["bg"] == "green":
            button.config(text="Selected", bg="yellow")
            self.selected_seats.append((actual_row, col))
        elif button["bg"] == "yellow":
            button.config(text="Available", bg="green")
            self.selected_seats.remove((actual_row, col))
        elif button["bg"] == "red":
            if (actual_row, col) not in self.selected_to_cancel:
                button.config(bg="orange", text="Cancel?")
                self.selected_to_cancel.append((actual_row, col))
            else:
                button.config(bg="red", text="Booked")
                self.selected_to_cancel.remove((actual_row, col))

    def confirm_booking(self):
        if not self.selected_seats:
            messagebox.showwarning("No Seats Selected", "Please select at least one seat to book.")
            return

        customer_name = self.customer_name_entry.get()
        customer_contact = self.customer_contact_entry.get()
        movie_title = self.movie_title_entry.get()
        show_time = self.show_time_entry.get()

        if not customer_name or not customer_contact or not movie_title or not show_time:
            messagebox.showwarning("Incomplete Info", "Please fill in all fields.")
            return

        booked_seats_str = ', '.join(f"{chr(65 + row)}{col + 1}" for row, col in self.selected_seats)

        for row, col in self.selected_seats:
            button = self.seats[row][col]
            button.config(text="Booked", bg="red")

        self.booked_seats += len(self.selected_seats)
        available_seats = self.total_seats - self.booked_seats
        self.available_label.config(text=f"Available Seats: {available_seats}")
        self.booked_label.config(text=f"Booked Seats: {self.booked_seats}")

        # Save booking to database and CSV
        self.save_booking(customer_name, customer_contact, movie_title, show_time, booked_seats_str)

        messagebox.showinfo("Booking Confirmation", f"Booking Confirmed!\nBooking Number: {self.generate_booking_number()}")
        self.selected_seats.clear()

    def generate_booking_number(self):
        return f"BK{int(datetime.datetime.now().timestamp())}"

    def save_booking(self, name, contact, movie_title, show_time, booked_seats):
        try:
            # Save to SQLite database
            cursor = self.conn.cursor()
            cursor.execute('''INSERT INTO bookings (name, contact, movie_title, show_time, booking_date, booked_seats)
                              VALUES (?, ?, ?, ?, ?, ?)''', 
                           (name, contact, movie_title, show_time, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), booked_seats))
            self.conn.commit()
            
            # Save to CSV file
            with open("bookings.csv", mode="a", newline="") as file:
                writer = csv.writer(file)
                # Write header only if the file is empty
                if file.tell() == 0:
                    writer.writerow(["Name", "Contact", "Movie Title", "Show Time", "Booking Date", "Booked Seats"])
                writer.writerow([name, contact, movie_title, show_time, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), booked_seats])
        except sqlite3.Error as e:
            print(f"Database error: {e}")
        except Exception as e:
            print(f"Unexpected error: {e}")

    def cancel_booking(self):
        if not self.selected_to_cancel:
            messagebox.showwarning("No Seats to Cancel", "Please select at least one booked seat to cancel.")
            return

        for row, col in self.selected_to_cancel:
            button = self.seats[row][col]
            button.config(text="Available", bg="green")
            self.booked_seats -= 1

        available_seats = self.total_seats - self.booked_seats
        self.available_label.config(text=f"Available Seats: {available_seats}")
        self.booked_label.config(text=f"Booked Seats: {self.booked_seats}")

        messagebox.showinfo("Cancellation", "Selected bookings have been cancelled.")
        self.selected_to_cancel.clear()

    def reset_booking(self):
        for row in range(6):
            for col in range(10):
                button = self.seats[row][col]
                button.config(text="Available", bg="green")

        self.selected_seats = []
        self.selected_to_cancel = []
        self.booked_seats = 0
        self.total_seats = 60
        self.available_label.config(text=f"Available Seats: {self.total_seats}")
        self.booked_label.config(text=f"Booked Seats: {self.booked_seats}")

    def show_about(self):
        messagebox.showinfo("About", "This project was developed using Tkinter by Budhram, who is a student of Chandigarh University.")

    def close_app(self):
        self.conn.close()  # Close the database connection
        self.root.destroy()

if __name__== "__main__":
    root = tk.Tk()
    app = SeatBookingApp(root)
    root.protocol("WM_DELETE_WINDOW", app.close_app)
    root.mainloop()
